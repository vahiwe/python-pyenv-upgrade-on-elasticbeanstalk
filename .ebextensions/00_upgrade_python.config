commands:
  01_upgrade_python_version:
    command: "/tmp/upgrade_python_version.sh"

# Files are available for commands to use
# Storing the script in the repo doesn't work since the file is not available when commands are run
files:
  "/tmp/upgrade_python_version.sh":
    mode: "000755"
    content : |
      #!/bin/bash -e

      # This should be set in the environment variables of the Elastic Beanstalk environment. e.g. 3.8.5
      # You can find the available versions of python on pyenv by running the following command:
      # - pyenv install --list
      PYTHON_VERSION=$(/opt/elasticbeanstalk/bin/get-config environment -k PYTHON_VERSION)

      # This should be set in the environment variables of the Elastic Beanstalk environment by default
      # Default value: /var/app/venv/staging-LQM1lest/bin
      PYTHONPATH=$(/opt/elasticbeanstalk/bin/get-config environment -k PYTHONPATH)

      # Check if the PYTHON_VERSION environment variable is set
      if [ -z "$PYTHON_VERSION" ]; then
          echo "PYTHON_VERSION is not set. Please set the PYTHON_VERSION environment variable."
          exit 1
      fi

      # Check if the PYTHONPATH environment variable is set
      if [ -z "$PYTHONPATH" ]; then
        echo "PYTHONPATH is not set. Please set the PYTHONPATH environment variable."
        exit 1
      fi

      # Remove the /bin suffix from the PYTHONPATH environment variable using sed
      PYTHONPATH=$(echo $PYTHONPATH | sed 's/\/bin$//')

      # Check if the desired version of python is already installed
      if [ -x /usr/bin/.pyenv/versions/$PYTHON_VERSION/bin/python3 ]; then
        echo "Python version $PYTHON_VERSION is already installed in pyenv"

        # Check if the virtual environment exists
        if [ ! -d $PYTHONPATH ]; then
          echo "Virtual environment does not exist. Creating a new virtual environment with the correct version of python"
          /usr/bin/.pyenv/versions/$PYTHON_VERSION/bin/python3 -m venv $PYTHONPATH
          exit 0
        fi

        # Get version of python in the virtual environment
        PYTHON_VERSION_VENV=$($PYTHONPATH/bin/python3 --version)

        # Check if the version of python in the virtual environment is the same as the desired version
        if [ "$PYTHON_VERSION_VENV" == "Python $PYTHON_VERSION" ]; then
          echo "Python version $PYTHON_VERSION is already installed in the virtual environment"
          exit 0
        fi

        # Remove the old virtual environment
        rm -rf $PYTHONPATH

        # Create a new python virtual environment with the correct version of python
        /usr/bin/.pyenv/versions/$PYTHON_VERSION/bin/python3 -m venv $PYTHONPATH
        exit 0
      fi

      # Install the following dependencies, which are necessary to build the versions of python via pyenv:
      sudo yum groupinstall -y "Development Tools"
      sudo yum install -y openssl11 openssl11-libs readline-devel \
        zlib-devel bzip2 bzip2-devel sqlite sqlite-devel \
        libffi-devel xz-devel openssl11-devel

      # If you run into a 'command not found' error for --allowerasing,
      # as an alternative you can use the 'yum swap' command to swap
      # the installed openssl-devel package for the openssl11-devel package:
      sudo yum swap openssl-devel openssl11-devel

      # Install pyenv and then add the pyenv directory and binary to your shell envrionment:

      # Set the pyenv root to a readable location
      export PYENV_ROOT=/usr/bin/.pyenv

      # Download the pyenv installer
      curl -sL https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer -O

      # Check if pyenv is not already installed
      if [ ! -d $PYENV_ROOT ]; then
        bash pyenv-installer
      fi

      # Setup the pyenv environment variables
      grep -q 'export PYENV_ROOT="/usr/bin/.pyenv"' ~/.profile || echo 'export PYENV_ROOT="/usr/bin/.pyenv"' >> ~/.profile
      grep -q 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' ~/.profile || echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.profile
      grep -q 'eval "$(pyenv init -)"' ~/.profile || echo 'eval "$(pyenv init -)"' >> ~/.profile
      grep -q 'eval "$(pyenv virtualenv-init -)"' ~/.profile || echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.profile

      # Install the desired version of python, for example 3.8.5:
      export PYENV_ROOT="/usr/bin/.pyenv"
      export PATH="$PYENV_ROOT/bin:$PATH"
      pyenv install $PYTHON_VERSION

      # Enable the new version as the global:
      pyenv global $PYTHON_VERSION

      # Verify the version of python is indeed the version we specified in the previous command:
      /usr/bin/.pyenv/versions/$PYTHON_VERSION/bin/python3 --version

      # Remove the old virtual environment
      rm -rf $PYTHONPATH

      # Create a new python virtual environment with the correct version of python
      /usr/bin/.pyenv/versions/$PYTHON_VERSION/bin/python3 -m venv $PYTHONPATH